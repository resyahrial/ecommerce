// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package infrastructures

import (
	authentication2 "github.com/resyahrial/go-commerce/internal/infrastructures/repositories/authentication"
	order2 "github.com/resyahrial/go-commerce/internal/infrastructures/repositories/order"
	product2 "github.com/resyahrial/go-commerce/internal/infrastructures/repositories/product"
	"github.com/resyahrial/go-commerce/internal/infrastructures/repositories/user"
	"github.com/resyahrial/go-commerce/internal/usecases/authentication"
	"github.com/resyahrial/go-commerce/internal/usecases/order"
	"github.com/resyahrial/go-commerce/internal/usecases/product"
	"github.com/resyahrial/go-commerce/pkg/hasher"
	"github.com/resyahrial/go-commerce/pkg/token-manager"
	"gorm.io/gorm"
)

// Injectors from injector.go:

func InitAuthenticationUsecase(db *gorm.DB, tokenManagerOpts tokenmanager.JwtTokenManagerOpts) authentication.AuthenticationUsecaseInterface {
	authenticationRepo := authentication2.New(db)
	hasherHasher := hasher.NewBcyptHasher()
	tokenManager := tokenmanager.NewJwtTokenManager(tokenManagerOpts)
	userRepo := user.New(db)
	authenticationUsecaseInterface := authentication.New(authenticationRepo, hasherHasher, tokenManager, userRepo)
	return authenticationUsecaseInterface
}

func InitProductUsecase(db *gorm.DB) product.ProductUsecaseInterface {
	productRepo := product2.New(db)
	productUsecaseInterface := product.New(productRepo)
	return productUsecaseInterface
}

func InitOrderUsecase(db *gorm.DB) order.OrderUsecaseInterface {
	orderRepo := order2.New(db)
	productRepo := product2.New(db)
	orderUsecaseInterface := order.New(orderRepo, productRepo)
	return orderUsecaseInterface
}
